Паттерн Singleton — это порождающий паттерн проектирования, который гарантирует,
 что у класса есть только один экземпляр, и предоставляет глобальную точку доступа
 к этому экземпляру.

Основные элементы паттерна Singleton:

Приватный конструктор (Private Constructor): Обычно класс синглтона имеет конструктор,
объявленный как приватный, чтобы предотвратить создание экземпляров класса извне.
Статический метод получения экземпляра (Static Instance Retrieval Method):
Класс синглтона предоставляет статический метод, который позволяет клиентскому коду
получить доступ к единственному экземпляру класса.
Приватное статическое поле экземпляра (Private Static Instance Field): Внутри класса
синглтона обычно хранится приватное статическое поле, содержащее единственный экземпляр класса.
Пример использования паттерна Singleton в Spring Boot приложениях может быть связан с
созданием бинов (компонентов Spring), которые должны быть доступны в единственном экземпляре.

В Spring Framework существует несколько способов создания синглтонов:

1. Конфигурация бина с помощью аннотации @Component или @Service: По умолчанию бины,
созданные с помощью этих аннотаций, являются синглтонами.

2. Использование аннотации @Bean в конфигурационном классе:
Методы, аннотированные @Bean, по умолчанию возвращают синглтоны.

Когда Spring Boot загружает приложение, он автоматически сканирует компоненты и конфигурации,
и создает синглтоны для бинов, аннотированных как @Component, @Service, или определенных в
конфигурационных классах с помощью @Bean. Эти синглтоны будут доступны в приложении через
механизм внедрения зависимостей (DI) Spring.
